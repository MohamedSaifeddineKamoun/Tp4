package in.obify.obitemservice.controller;

import in.obify.obitemservice.model.ItemModel;
import in.obify.obitemservice.repository.ItemRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/v1")
public class ItemController {

    @Autowired
    private ItemRepository itemRepository;

    @GetMapping("/items")
    public Flux<ItemModel> getAllItems() {
        return itemRepository.findAll();
    }

    @GetMapping("/items/{id}")
    public Mono<ItemModel> getItem(@PathVariable String id) {
        return itemRepository.findById(id);
    }

    @PostMapping("/items")
    public Mono<ResponseEntity<String>> saveItem(@RequestBody ItemModel item) {
        return itemRepository.insert(item)//it will create new document in table with autogenerated id, if id exist than exception in is thrown
                .map(savedItem -> {
                    URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                            .path("/{id}")
                            .buildAndExpand(savedItem.getId())
                            .toUri();
                    //http://localhost:8081/api/v1/items/611b7bcfef59e87f2e0e0d60
                    return ResponseEntity.created(uri).build();
                });
    }

    @PutMapping("/items/{id}")//full update of all properties
    public Mono<ResponseEntity<ItemModel>> updateItem(@PathVariable String id, @RequestBody ItemModel item) {
        return itemRepository.findById(id).flatMap(imFromDB -> { // Code pour accéder à l'objet de type "ItemModel" à travers le Mono
            BeanUtils.copyProperties(item, imFromDB);//copy all data from item to imFromDB
            return itemRepository.save(imFromDB);
        }).map(imFromDB -> {
            return new ResponseEntity<>(imFromDB, HttpStatus.OK);
        });//if request has id than it will update else it will insert new document with new autogenerated id
    }

    @PatchMapping("/items/{id}")//only update price keep other fields as old values
    public Mono<ResponseEntity<ItemModel>> updateItemPrice(@PathVariable String id, @RequestBody ItemModel item) {
        ResponseEntity<ItemModel> re;
        return itemRepository.findById(id).flatMap(imFromDB -> { // Code pour accéder à l'objet de type "ItemModel" à travers le Mono
            imFromDB.setPrice(item.getPrice());
            return itemRepository.save(imFromDB);
        }).map(imFromDB -> {
                return new ResponseEntity<>(imFromDB, HttpStatus.OK);
        });//if request has id than it will update else it will insert new document with new autogenerated id
    }

    @DeleteMapping("/items/{id}")
    public ResponseEntity<String> deleteItem(@PathVariable String id) {
        itemRepository.deleteById(id);
        ResponseEntity<String> re = new ResponseEntity<>(id, HttpStatus.OK);
        return re;
    }
}
