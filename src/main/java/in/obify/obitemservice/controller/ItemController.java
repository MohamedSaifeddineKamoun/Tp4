package in.obify.obitemservice.controller;

import in.obify.obitemservice.appuser.AuthService;
import in.obify.obitemservice.model.ItemModel;
import in.obify.obitemservice.model.UserModel;
import in.obify.obitemservice.repository.ItemRepository;
import in.obify.obitemservice.repository.UserRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.annotation.SessionScope;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/v1")
public class ItemController {

    @Autowired
    private ItemRepository itemRepository;
    @Autowired
    private AuthService authService;
    @Autowired
    private MongoTemplate mongoTemplate;
    @PostMapping("/register")
    public String register(@RequestBody UserModel user) {
        mongoTemplate.save(user); // userRepository.save(user) mais il faut l'importer
        return "User registered successfully!";
    }
    @PostMapping("/login")
    public String login(@RequestBody UserModel user, HttpServletRequest request, HttpSession session) {
        if (authenticate(user.getUsername(), user.getPassword(), request)) {
            return "Logged in successfully!";
        } else {
            return "Invalid credentials!";
        }
    }
    @Autowired
    UserRepository userRepository;
    public boolean authenticate(String username, String password, HttpServletRequest request) {
        UserModel user = userRepository.findByUsername(username);
        if (user != null && user.getPassword().equals(password)) {
            // Consistent session retrieval
            HttpSession session = request.getSession(false);
            if (session == null) {
                // Create a new session if persistence is not configured
                session = request.getSession(true);  // Only create a new session if needed
                System.out.println("New session created for user: " + user.getUsername());
            }
            session.setAttribute("userId", user.getId());
            System.out.println("User " + user.getUsername() + " added to session: " + session.getAttribute("userId"));
            return true;
        } else {
            return false;
        }
    }
    @GetMapping("/items")

    public ResponseEntity<List<ItemModel>> getAllItems(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        System.out.println(session);
        if (session == null || session.getAttribute("userId") == null ) {
            if (session != null)
                System.out.println(" session id  is" + session.getAttribute("userId"));
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }
        System.out.println("you are authenticated !!!");
        return new ResponseEntity<>(itemRepository.findAll(), HttpStatus.OK);
    }


    @PostMapping("/logout")
    public String logout(HttpServletRequest request) {
        authService.logout(request);
        return "Logged out successfully!";
    }

    @GetMapping("/items/{id}")
    public ItemModel getItem(@PathVariable String id) {
        return itemRepository.findById(id).orElseThrow(() -> new RuntimeException("Cannot Find Item By ID: " + id));
    }

    @PostMapping("/items")
    public ResponseEntity<String> saveItem(@RequestBody ItemModel item) {
        ItemModel savedItem = itemRepository.insert(item);//it will create new document in table with autogenerated id, if id exist than exception in is thrown
        URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(savedItem.getId())
                .toUri();
        //http://localhost:8081/api/v1/items/611b7bcfef59e87f2e0e0d60
        return ResponseEntity.created(uri).build(); // to know
    }

    @PutMapping("/items/{id}")//full update of all properties
    public ResponseEntity<ItemModel> updateItem(@PathVariable String id, @RequestBody ItemModel item) {
        ItemModel imFromDB = itemRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Item By ID: " + id));
        BeanUtils.copyProperties(item, imFromDB);//copy all data from item to imFromDB
        imFromDB = itemRepository.save(imFromDB);//if request has id than it will update else it will insert new document with new autogenerated id
        return new ResponseEntity<>(imFromDB, HttpStatus.OK);
    }

    @PatchMapping("/items/{id}")//only update price keep other fields as old values
    public ResponseEntity<ItemModel> updateItemPrice(@PathVariable String id, @RequestBody ItemModel item) {
        ItemModel imFromDB = itemRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Item By ID: " + id));
        imFromDB.setPrice(item.getPrice());
        imFromDB = itemRepository.save(imFromDB);//if request has id than it will update else it will insert new document with new autogenerated id
        return new ResponseEntity<>(imFromDB, HttpStatus.OK);
    }

    @DeleteMapping("/items/{id}")
    public ResponseEntity<String> deleteItem(@PathVariable String id) {
        itemRepository.deleteById(id);
        ResponseEntity<String> re = new ResponseEntity<>(id, HttpStatus.OK);
        return re;
    }
}
